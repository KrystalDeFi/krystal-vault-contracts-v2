// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.28;

import { console } from "forge-std/console.sol";
import { Test } from "forge-std/Test.sol";
import { AssetLib } from "../../contracts/public-vault/libraries/AssetLib.sol";
import { ICommon } from "../../contracts/public-vault/interfaces/ICommon.sol";
import { ILpStrategy } from "../../contracts/public-vault/interfaces/strategies/ILpStrategy.sol";
import "forge-std/console.sol";

contract Debug is Test {
  function test() public {
    bytes memory data = bytes(
      hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000827922686190790b37229fd06084350e74485b720000000000000000000000004200000000000000000000000000000000000006000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda029130000000000000000000000000000000000000000000000000000000000000064fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0fa8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1390000000000000000000000000000000000000000000000000000170b9b593b1c6000000000000000000000000000000000000000000000000000000000022773300000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000"
    );
    AssetLib.Asset[] memory assets = abi.decode(data, (AssetLib.Asset[]));
    for (uint256 i = 0; i < assets.length; i++) {
      console.log(assets[i].token);
      console.log(assets[i].amount);
    }

    bytes memory data2 = bytes(
      hex"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000097b78a9c77680e3af900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006256d1d220bc0203f00000000000000000000000000000000000000000000032e46ac6d09eaeae14a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000"
    );
    ICommon.Instruction memory instruction = abi.decode(data2, (ICommon.Instruction));
    console.log(instruction.instructionType);
    ILpStrategy.DecreaseLiquidityAndSwapParams memory params =
      abi.decode(instruction.params, (ILpStrategy.DecreaseLiquidityAndSwapParams));
    console.log(params.liquidity);
    console.log(params.amount0Min);
    console.log(params.amount1Min);
    console.log(params.principalAmountOutMin);
    console.logBytes(params.swapData);
  }
}
